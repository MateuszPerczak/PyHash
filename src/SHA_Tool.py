import hashlib
import os
from tkinter import *
from tkinter import ttk
from tkinter.filedialog import askopenfilename
root = Tk()
root.geometry("475x110")
root.title("SHA Tool")
root.configure(background="#fff")
current_dir = os.getcwd()
# icon
img = b'\x89PNG\r\n\x1a\n\x00\x00\x00\rIHDR\x00\x00\x00`\x00\x00\x00`\x08\x06\x00\x00\x00\xe2\x98w8\x00\x00\x00' \
      b'\x01sRGB\x00\xae\xce\x1c\xe9\x00\x00\x00\x04gAMA\x00\x00\xb1\x8f\x0b\xfca\x05\x00\x00\x00\tpHYs\x00\x00\x0e' \
      b'\xc3\x00\x00\x0e\xc3\x01\xc7o\xa8d\x00\x00\x07\x18IDATx^\xed\x9cG\xc8\xeeD\x14\x86\xaf\x8ab\xef\xd8\x05\x17b' \
      b'\x17\x17\xf6\xde\x10\xec\xb8\x11\x17\xa2\xa8X\xb0\xa0("\n\xeeD\xc5\xae\x88\x1d\x04A\\*v\xec\x1d\x14\xdc\xd8{' \
      b'C\xc5\x82b\xef\xf5}\xe0\x06\xc2\xc7\x99d2\x99\xf9\xeeL\xfey\xe0\x81\xcb\xfd\x93\xf9&\xed\xcc\xe4\xe4$\x8b' \
      b'*\x95J\xa5R\xa9T*\x95J\xa5R6\x1b\xc9\xd3\xe5\xc3\xf2-\xf9\xf3b\xf9\xf7C\xf24\xc92\xf3"\xb7\xfe$c}y\xab\xfcK' \
      b'\xfe\xd7#\xcb\xdc,Y\'\x15\xb9\xf5\')\x87\xca\x1f\xa4\xb5q]~/\x0f\x96\xb1\xc9\xad?I\xe1\xf2\xfe[' \
      b'Z\x1b\xe4#\xeb\x9e*c\x91[\x7f\x92r\x98\x1c\xb3\xb1\x8d\xb4\x11\xe3\xcc\xcb\xad?I!^r\xc9Z\x1b\x10"m\xad\'C\xc9' \
      b'\xad?\xc9a\x80\xb3:\x8e\xbf\xca+\xe5\x8er\xa5\xc5\xee$\xaf\x91\xfc\xcdZ\x07o\x92\xa1\xe4\xd6\x9f\xa4l,' \
      b']\xb3\x8b\x0f\xe5\xd6\xd2\x05\x7f\xfbXZ\xeb\xd2\xe6\x06r(' \
      b'\xb9\xf5\'9gH\xab\xc3\x9cM\xdb\xc8>\xb6\x95\xbfI\xab\x8d\x90\x010\xb7\xfe$\xe7Aiu\xf6j\xe9\xcb\xb5\xd2j\xe3' \
      b'\x019\x94\xdc\xfa\x93\x9cw\xa4\xd5\xd9\x1d\xa4/\xbbH\xab\x8d\xb7\xe5Pr\xebOr~\x94Vg\x19\xdc|YEZm\xd0\xf6Pr' \
      b'\xebOrbl\xf0\xaa\xd2j\x83\xb8=\x14W\xfc\x9e\xec\x01p]\xf2L\xf3|\xd9UZm0#\x19\xcag\xd2jkH\x7f\x8a\nA1\x06' \
      b'=\x92_V\x1b\xf7\xc9\xa10PZm\xc5\x18\x84\xef\x97\xd9A\xbe\xc5\xea,\xa1\x80)]\x1f\x9cm\xaey\xfb9r(' \
      b'gI\xab-\xdf\xfe\x147\r%\x7f\xee\xda\x81\x84\x90\xae\xb97;\xffki\xadK\x9b\xeb\xca\xa1\x902\xf8]Zm\xf6\xf5\x87' \
      b'\x9d\xff\x89\xb4\xd6\xa5?\xd9\xa6\xa8]!\x04\x19H\xaf\x93;K\x06B\x06\xb8\xdd$\xeb\xb8\x0e\x1c\x92N\x08\xe5zi' \
      b'\xb5\x89\xb3\xfdAN\x04\xfe\xcfu\xe0\xf0F\x99-\x9cu1\x93_x\xa4\x0ce\r\xf9\x85\xb4\xda\r\xf1;\x19r5\xce\x15R' \
      b'\xb61\xd2\xbf\x8d\x1cP\xce\xd2P\xf6\x94\x7fH\xab\xed!\xb2M\x07\xca"`\x90\x8ay\x10\x18\x1f6\x95\xa1\x1c!\xbb' \
      b'\xc2J\x9fl\xcb)\xb2(\xb8\x12b\x86#2\x98c\x1e\x94\xef!\xff\x91V\xdb]\x12v\x8a9\xf3ga\xb6@\xfe\xbck\x90m\xfcE' \
      b'\xb2l\xd7A{U\xae&C\xd8_Zm\xba\xa4\xcf7\xc8\xac\x1f\xc0\xf8\xb2\xa1$,qs\xf4\xa6\xe4V\x9eY\x08\xd3\xc1{$\x7f[' \
      b'S\xc2\xde\x92\x83a\xed\x14|^\xae(\x87r\x97\xb4\xda\xe3A\xfd\xb7\x92>\xd17\xfaH\x7f\xb2\xcc\xf9\xcf\x8b\xc3e' \
      b'\xd7\x18r\xaf\\F\xc2R\x92A\xfa\x12\xf9\xa4\xfc\\rp\xf1S\xf9\x94\xbcL\xban\xaa\xce\x94\x15\x03\xceBk\x875\xde' \
      b'!\x8f\x97\xe4e\xac\xbf\xfb\xf8\xa7\\GV\x1c\\*\xad\x1d\x17\xcb\x90\x1c\xd3\x82\x82\xf0r\x9b\xb4v^\x0ci{' \
      b'\x0c\x8c\x13gK\xc6\r\xc63\xc6\xae\xc9\x958\x12\xeb\x89\xf9\xd6\x0e\x8c\xe1\x15\x92\x03=\x04\xc2\xd6\xed\xd2' \
      b'\xe7\x06\x8f\xd9T\xd1%\x8e\xc0\xacgL\xac\xef\xf3B\xe9\xcb!\xd2\x958\xec\x92\xe9uq%\x8e\r\xdb\xc9\xbe\xb3\xed' \
      b'\x11y\x92\xdc\\6\xc95\xfe\xcd\xff=*\xadu\x1a\x99q\xed+\xfb8V\x8e\xb9\xc3g]&\x17E\xb1\x9c|MZ\x1b\x84\xef\xca' \
      b'\xbdd\x1f\xfbH\x96\xb5\xda@\xa6\xac\xcbK\x17\xfb\xc91;\xbf\x916\x8a\xba\x12N\x90\xd6\x86\xe03\x92\x8c\xa7/,' \
      b'\xcb:V[\xe8\xba\'`\xbd\xaf\xa4\xb5N\x88\x84\xa3"\xee\xb0\x97\x96\xae\xd8\xff\x9e\x0cIK\xb03Y\xd7j\x93\xd4\xf5' \
      b'\xb2r\x16\x06jky\xe4\x86oR%\x8emH\xa0Y\x9dG\xd2\xcc\xa1\x10\xef\xad6qv,' \
      b'\xe0\xc1\x91+52\xc9\x12\xc76\x17I\xab\xf3\x8f\xc9\xb1<!\xad\xb6y"\xd6\xe6hi-\xc7\xd9=\xc9\x12\xc76\xcfI\xab' \
      b'\xe3\'\xca\xb10;\xb2\xda\xf6u\xb2%\x8em\xde\x97V\xc7\x99^\x8eeKi\xb5\xed\xebdK\x1c\xdb\xb8b/qy,' \
      b'\xae\xaa7_\x19l})\xaa\xc2\xae\x8d\xeb\x00P\xc28\x16\xee/\xac\xb6}]\x10\x07\xe0#iu|\x0b9\x96\xad\xa4\xd5\xb6' \
      b'\xaf\x93-ql\xf3\xac\xb4:\xce\xcd\xd9X\xban\xf0|\x9cl\x89c\x9b\x8b\xa5\xd5q\xf2>cy\\Zm\xfbNC\'[' \
      b'\xe2\xd8\xc6\xf5 \xfd_\x99\xeaF\xec \xd9\xa6\xebFl\xb2%\x8e\r\xa4"\\i\x83Wd\xc8`\xbc\x96tMoy\x9e\xcc\xe0<\xcb' \
      b'\xe5\xd2Z\x1e\xb9!\x9b\\\x89c\x1b\xd7\xcbv\xc8\xdd\xec\n\xd2\x17*/\x9e\x96V[x\xae\xb4 ' \
      b'\x7f\xf4\xa5\xb4\xd6\t\xb1\x88\x12\xc7\x06\x92coHkC\xf0u\xb9\xbd\xec\x83\xb0\xf3\x81\xb4\xda@\xae\x8a\xae' \
      b'\x83I:;V:\xba\xb8B/\x9eBY\x1b\xd3\xc8\x98\xc03\xd8\xe3\xe4f\xb2\t\x05\xdc\xedRRH\xb9\x8a\xb5^#;\x85\xf1\xa6' \
      b'\x8fc\xa4O\x91\x99K~\xa7\xb8\x12GR\xce/Kk\x83by\xbe\xf4\x85\x93!\xe4\xd9@\x91%\x8e\xec\xfc\x97\xa4\xb5A\xb1' \
      b'\xe4\x8c\xdeD\x0e\x81\x87\xf2TT\xf8\x14\xfc\xd2~\x91%\x8eL\xff^\x90\xd6F\xc5\x96\xackSi7\x04v*\xafBqC\xc5' \
      b'\xf8BIJ\x96%\x8e\xd6\'\xc2\x98[7\xb5\xa1\xd4\xcf\xb4\x1f-\x12\xbf]\xa9\xe8\xc6\xae\xa7M!^ ' \
      b'\'\x077\x1a\xbe\x9f\x08k\x1e\xedq\xc6tM\x15\xf1N\xb9\xb2<O2w\xb7\x96\xb1\xe4\x80\xbb\x0e\x1cU\x17>\xb3\xa9b' \
      b'\x08\xfdDX\xdfT\x8f\x9d\xdf\x0e\x17\xfc\xfb\x00y\x95$w\xc4\xfb\xc1\xecd\xe23\xcfx)\xce\xe5F\x8ai$7v\xae\xb7' \
      b'\'\x91\xab3\xa4\xf2:;\xc6~"\xcc\xe5\xec\xce\x0f\x81*\xb8\xae:!\xaa\xf0(' \
      b'e\xa7\x84\xa5\xc8\xaf)\xc6\xfaD\xd8\xac1v~\x03\xef+\xf0N\x80\xf5;}\x12N\xb3-5\xa4S1_Kj\x8c\xb9\xf3\x1b\x8e' \
      b'\x92\xd6o\xf9\x9ae\xa9a\x8aO\x84\xbd(c\xef\xfc\x06\xd2\xda\xd6o\xfa\xca\x95\x9eMJ9\xd5\'\xc2~\x92\xab\xcb\xd8' \
      b'\xf0*T\xac\xd7W\xb3\xb8\x12R~",F\x19J\x9b\xb5eH\x85\xb3\xcb,' \
      b'J\rS~"\xecn\x19\x13\xc2\x9e\xf5;Hb\xef\x16\xc9ICv\xd47T.\xf1R\xc3\x94\x9f\x08\xe3\xe1|,' \
      b'8S]9\x9co\xe4\xee\xd2E\xd6\xa5\x86\xe4@\xac\x8eq\x06\xf9\xe2*\xdf\xe0\xcc\x8b\xc5\xc9\xd2\xfa\rv\xa0O\xa5C' \
      b'\xb6\xcfxS\x1e\x80\x98\xf53\xbc\x98g\xfd\xc6\x90\x10\x92e\xa9a\x8cO\x96\xcd\xa3~\xc6\xd5O~\xdb\x97,' \
      b'\xeb|R\x0e\xc21\xebg\\W\xea\x90w\r\xb2\xact\x1b\xfb\xc9\xb2y\xc5\xd6RB\xe5`\xc6|\xb2l\x9e\xf53\xa5\x84\xca ' \
      b'\x86|\xb2\x0c\xd9\x90y\xd7\xcf\x94\x12*\x83`\x8e\x1d3\x19\x97\xa2~\xa6\x94P\x19\x0cy\x91\x18\xe9h\xdaHQEPJ' \
      b'\xa8\x1c\x05g\xc2\x98\x83\xc0\xba)\xebgJ\x08\x95\xa3\xe1J\x08\tG\xf3\xa8\x9f)!TF\x81K\xd2\xf7\x93e,' \
      b'3\xcf\xfa\x99\xdcCeT\xacO\x96\xe1\x92\xae\x9f\xc9=T.\x08r\x0e\x95\x0b\x86\x9cC\xe5\x82"\xd7PY\xa9T*\x95J\xa5R' \
      b'\xa9T*\x95\xb4,Z\xf4?\x1fg\xf4(\xba+(E\x00\x00\x00\x00IEND\xaeB`\x82 '
img = PhotoImage(data=img)
root.wm_iconphoto(True, img)
# end


def add_file():
    global current_dir
    sha1_entry.delete(0, END)
    md5_entry.delete(0, END)
    sha256_entry.delete(0, END)
    file = askopenfilename(initialdir=current_dir, filetypes=(("Exe file", "*.exe"), ("All Files", "*.*")),
                           title="Choose a exe file.")
    if file:
        root.title("SHA Tool" + "- {}".format(os.path.basename(file)))
        sha1_entry.insert(0, str(sha1(file)))
        md5_entry.insert(0, str(mmd5(file)))
        sha256_entry.insert(0, str(sha256(file)))
    else:
        pass


def sha1(file):
    sha1sum = hashlib.sha1()
    with open(file, 'rb') as source:
        block = source.read(2 ** 16)
        while len(block) != 0:
            sha1sum.update(block)
            block = source.read(2 ** 16)
    return sha1sum.hexdigest()


def mmd5(file):
    md5 = hashlib.md5()
    with open(file, 'rb') as source:
        while True:
            data = source.read(65536)
            if not data:
                break
            md5.update(data)
    return md5.hexdigest()


def sha256(file):
    with open(file, 'rb') as source:
        contents = source.read()
    return hashlib.sha256(contents).hexdigest()


# sha1_frame
sha1_frame = Frame(root)
sha1_label = ttk.Label(sha1_frame, text="SHA1", background="#fff", font='Bahnschrift 9')
sha1_entry = ttk.Entry(sha1_frame, font='Bahnschrift 9')
sha1_label.pack(side=LEFT, anchor=NW)
sha1_entry.pack(side=LEFT, anchor=NW, fill=X, expand=TRUE)
# end

# md5
md5_frame = Frame(root)
md5_label = ttk.Label(md5_frame, text="MD5", background="#fff", font='Bahnschrift 9')
md5_entry = ttk.Entry(md5_frame, font='Bahnschrift 9')
md5_label.pack(side=LEFT, anchor=NW)
md5_entry.pack(side=LEFT, anchor=NW, fill=X, expand=TRUE)
# end

# sha256
sha256_frame = Frame(root)
sha256_label = ttk.Label(sha256_frame, text="SHA256", background="#fff", font='Bahnschrift 9')
sha256_entry = ttk.Entry(sha256_frame, font='Bahnschrift 9')
sha256_label.pack(side=LEFT, anchor=NW)
sha256_entry.pack(side=LEFT, anchor=NW, fill=X, expand=TRUE)
# end

# main
add_file = ttk.Button(root, text="ADD", takefocus=0, command=add_file)
add_file.pack(side=TOP, fill=X)
sha1_frame.pack(fill=X)
sha256_frame.pack(fill=X)
md5_frame.pack(fill=X)
author_label = ttk.Label(root, text="By Mateusz Perczak", background="#fff", font='Bahnschrift 9')
author_label.pack(side=BOTTOM, anchor=S)
# end

root.mainloop()

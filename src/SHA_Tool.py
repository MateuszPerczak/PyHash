import hashlib
import os
from tkinter import *
from tkinter import ttk
from tkinter.filedialog import askopenfilename
from typing import ClassVar
root: ClassVar = Tk()
root.geometry("600x80")
root.title("SHA Tool")
root.minsize(400, 80)
root.resizable(width=TRUE, height=FALSE)
root.configure(background="#fff")
current_dir: str = os.getcwd()
# icon
img: ClassVar = PhotoImage(data=b'\x89PNG\r\n\x1a\n\x00\x00\x00\rIHDR\x00\x00\x00`\x00\x00\x00`\x08\x03\x00\x00\x00\xd5F\x87\n\x00\x00\x00\xbdPLTEGpL\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\tCh/\x00\x00\x00>tRNS\x00\xcf\xcc\x104\xdd"3\xee\xf3\x11,\xe3\x18\xebw\x15\xaa\x04\t\xf5\xf9\xe9\xfd\x1f$\xce.\x1e\xc2\x03\x02\x88&:\xc5\x06/S\xd9\x05)\n\xf2-\xd2\x0eQ\xfb1\xdb\xef\x920T\x16\xbb\xdf \x01\x0b\xd4\xcb\xf1\xc9\x00\x00\x00\x01\x08IDATh\xde\xed\x98g\x0f\x820\x10\x86\x11\x07\xee\xbd\xf7\xde{O\xfe\xff\xcf\x12\xdah\x1cEE\xbcD\xe3\xfb|\xba\xa4\x97{\xee\x02m\x03\x92\x04\x00\x00\x1f\xa71"-\x1f\r%\xd4H\x98\xae\xbeOV5\x92K\xc2\xf694C\xe4\xb2\xea\x99d\x93\xb0}\x9a!.\xdb\xb7<\x84\xdf}\xcf\xf8T\xb7\xb79+f\x82\xbc\xc5+\x02\x8fjL!\x13+\xa7\x1e\xac;\xac\t\xe2\xa1\x92\xb6^mQ\t\xd6i\x9e\xb0\x9f\xa7(\x04\xbc}\x8e\xe1\x10\x16\x04\x85\xcce\x8e\xd1\x930!\xd8z\xaf\xd9\xddd\ro\xd6\x07f\x05v\x93/\xb7\r\x02\x08 \xf8_\xc1\x94\xddS+\x16\x1f\xdcb:V\x04A\x16\x07\xf8UjpD\xfb \xf8mA\xda\xa5Sdq\xde%\xa6\x8e\x9d\x0c\xc1C\x81\xec\xd4\xe1\xdf\x025\xa7\x98\nv2\x048\x8b \xc0Y\x04\xc1\xd7\x0b\x1a\x8aN\x9b\xc5}EL\x0c;\x19\x02\x08\xde\x15\xd8ds\xc4?\xf1\xdf\xf49\x10\xfc\x88`\xa2\xbcOW\x02\x00\x00@\xc1\x11\xb0`\x8f\xbd\x8e\x0c[h\x00\x00\x00\x00IEND\xaeB`\x82')
root.wm_iconphoto(True, img)
add_img: ClassVar = PhotoImage(data=b'\x89PNG\r\n\x1a\n\x00\x00\x00\rIHDR\x00\x00\x00 \x00\x00\x00 \x08\x03\x00\x00\x00D\xa4\x8a\xc6\x00\x00\x012PLTEGpL\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xc4\x02j/\x00\x00\x00etRNS\x00\x02\x9a\xcc\x88\xeef\x17\xe0\x11FU\x99]\x04\x9e\xaaY\xdb\xbf\xec\x03/\xfdO\x18~\xc1\xf8\xf2\x91\x12\xfb!&\xd0\xb1\x06\xf9\xa6;\xbc\xeb\x8f\xf4<5Ntc\xc9\xdf\x05\x97m|\x0c\x82\x13\x9083\xfe\x84\xce\x08\xf3\xad\x9d\xd8\x14s\xe8\x1e\x7f\xda(7\xc2\xf5\xa5\xe7\xc0\x1a"KX_M1\x92\xd4.{Be\x8c\x8bzA\xd5]\xf3\x9e\xe2\x00\x00\x01+IDAT8\xcb\xc5\xd3WS\xc2@\x14\x86\xe1\x13\x15D\x13\x11\xd3\xe8\xbdK\x07\x01{\xef\xbd\xf7\xae\xdf\xff\xff\x0bF\x08\x11\xb2\x89W\xce\xf8^lr\xf1L\xb2\x9b\xcc!\xfa\x9b\xb8\xb1\xfe8\x16\x8c\xa2?\x8fb\x01\xbc\x8e^\xeb@Va\x81\xcb\xb8\x1fG\x06\x1e\xf7\xaf@\x9af\xc4 H\xa9\x8c\x18\x04\xf9\xcb+\x07Rn{\xd0m\xce\x0e,\x0e\x7f\xe7\xc2\x90\x1d\xe86\xf1\xef\x80\x8b\xefc\xd3\x1e\xf8#\xbb\xda13\x1bK6\xc0\x17\x06\x0e\xa4d\x0c\xcb+\x9c\x15\xf0y\x91Mh\xd7h \x84\x82\x05\xf0\x87\xb1C\xb4\xc7\x97\x89rE\xdc\xb2 \x82Sm\x9d\xc2\xa4\xb6\xd6\xf0\xc0\x00\xee\x0c\t\x03(\r<\x9aA\x1c"]\xf0\xfc\x02$\x9e\xbf\xa3&^\xcc\xe0\x08\xe7T\xd1\xff\xe7==\xa1m\x06\x87H\x92*\x08yl\t\xc25\xbd\xa2e\x06k\'\xb1\xa8\xb1\x07\xaa\xe3\xb9\x07d\xa7\xde*\x02\x06(A\x9e\xb1\x98\x8bP\x8e\xa8,\xdc\x10m\x8b\xa8\xea\x0f\x9e\x1d\xf9)\x88b\xad\xf3\x89K"\x8e\xd3VcX\x00\x1a\xcd\xf7\xb7:\x10\x9c\xb7\x9e\xd4\xcag\xe7Ur5m;\xcc\xaa\xb3\xdd\xfa\xe8\xee\xef\x0b\xbb\xd2L=\x85\x97Y\xa1\x00\x00\x00\x00IEND\xaeB`\x82')
# end


def add_file() -> None:
    global current_dir
    sha1_entry.delete(0, END)
    md5_entry.delete(0, END)
    sha256_entry.delete(0, END)
    file: str = askopenfilename(initialdir=current_dir, filetypes=(("Exe files", "*.exe"), ("All Files", "*.*")),
                                title="Choose a exe file.")
    if file:
        root.title("SHA Tool: {}".format(os.path.basename(file)))
        sha1_entry.insert(0, str(sha1(file).upper()))
        md5_entry.insert(0, str(mmd5(file).upper()))
        sha256_entry.insert(0, str(sha256(file).upper()))


def sha1(file) -> ClassVar:
    sha1sum: ClassVar = hashlib.sha1()
    with open(file, 'rb') as source:
        block: bytes = source.read(2 ** 16)
        while len(block) != 0:
            sha1sum.update(block)
            block: bytes = source.read(2 ** 16)
    return sha1sum.hexdigest()


def mmd5(file) -> ClassVar:
    md5: ClassVar = hashlib.md5()
    with open(file, 'rb') as source:
        while True:
            data: bytes = source.read(65536)
            if not data:
                break
            md5.update(data)
    return md5.hexdigest()


def sha256(file) -> ClassVar:
    with open(file, 'rb') as source:
        contents: bytes = source.read()
    return hashlib.sha256(contents).hexdigest()


# sha1_frame
sha1_frame: ClassVar = Frame(root)
sha1_label: ClassVar = ttk.Label(sha1_frame, text="SHA1", background="#fff", font='Bahnschrift 9', width=6)
sha1_entry: ClassVar = ttk.Entry(sha1_frame, font='Bahnschrift 9')
sha1_label.pack(side=LEFT, anchor=NW)
sha1_entry.pack(side=LEFT, anchor=NW, fill=X, expand=TRUE)
# end

# md5
md5_frame: ClassVar = Frame(root)
md5_label: ClassVar = ttk.Label(md5_frame, text="MD5", background="#fff", font='Bahnschrift 9', width=6)
md5_entry: ClassVar = ttk.Entry(md5_frame, font='Bahnschrift 9')
md5_label.pack(side=LEFT, anchor=NW)
md5_entry.pack(side=LEFT, anchor=NW, fill=X, expand=TRUE)
# end

# sha256
sha256_frame: ClassVar = Frame(root)
sha256_label: ClassVar = ttk.Label(sha256_frame, text="SHA256", background="#fff", font='Bahnschrift 9', width=6)
sha256_entry: ClassVar = ttk.Entry(sha256_frame, font='Bahnschrift 9')
sha256_label.pack(side=LEFT, anchor=NW)
sha256_entry.pack(side=LEFT, anchor=NW, fill=X, expand=TRUE)
# end

# main
add_file: ClassVar = ttk.Button(root, image=add_img, takefocus=0, command=add_file)
add_file.pack(side=LEFT, fill=Y)
sha1_frame.pack(fill=X)
sha256_frame.pack(fill=X)
md5_frame.pack(fill=X)
version_label = ttk.Label(root, text=" v1.0.4", background="#fff", font='Bahnschrift 9')
version_label.pack(side=RIGHT, anchor=S)
# end

root.mainloop()
